title: "Sergio Transcriptions. From images to research data"
description: > 
  This project offers a workflow to process documents from Sergio Mosquera's transcriptions of Libro venta esclavo (1810) fom Notaria Primera de Quibdó.

  In this project, we will:
  - Process the existing doc-level metadata file
  - Read a folder of image files ([JPG](https://app.box.com/folder/235653219613))
  - Split the images into single-page images for processing. Note that many documents should not be split.
  - Create a Hugging Face Dataset
  - Transcribe the images using the Qwen model in Lightning.ai
  - Process the transcriptions to extract structured data
  - Publish the project in a static site (TODO txt and PDF)
  - Remove black and purple background from images

vars:
  name: "Sergio Notebooks"
  language: "es"
  text_direction: 'horizontal-lr' #['horizontal-lr', 'horizontal-rl', 'vertical-lr', 'vertical-rl']
  version: "0.0.0"
  image_folder: "assets/JPG" 
  metadata_file: "'assets/Base de datos Cuadernos Sergio_Notaría Primera de Quibdó (1808-1825).xlsx'"
  split_image_folder: "assets/splits"
  cropped_image_folder: "assets/cropped"
  rotated_image_folder: "assets/rotated"
  background_removed_image_folder: "assets/background_removed"
  txt_folder: "assets/txt"
  nlp_model: "es_dep_news_trf"
  model: "Qwen/Qwen2-VL-2B-Instruct"
  code_model: "Qwen/Qwen2.5-Coder-7B-Instruct"
  dataset_name: "fmb-quibdo/sergio-notebooks"
  adjusted_image_folder: "assets/adjusted"
  chunked_image_folder: "assets/chunks"
  num_chunks: 12
  overlap_percentage: 3.0
  transcribed_chunks_folder: "assets/txt_chunks"
  prompt: "Extract all text line by line. Do not number lines. RETURN ONLY PLAIN TEXT. SAY NOTHING ELSE"

directories: ["assets", "configs", "scripts","_site","_templates","prompts", "pipelines", "packages"]

workflows:
  all:
    - metadata
    - crop
    - split
    - rotate
    - adjust_image
    - chunk
    - transcribe
    - dataset
    - process
    - publish
    # - remove_background

commands:
  - name: metadata
    help: "Read existing metadata file save as metadata.json"
    script:
      - "python scripts/metadata.py ${vars.metadata_file} metadata.json"
    outputs:
      - metadata.json

  - name: crop
    help: "Crop the images to remove unnecessary borders."
    script:
      - "python scripts/crop.py ${vars.image_folder} ${vars.cropped_image_folder}"
    outputs:
      - ${vars.cropped_image_folder}

  - name: split
    help: "Split the images into single-page images for processing. Remove ruler from image"
    script:
      - "python scripts/split.py ${vars.cropped_image_folder} ${vars.split_image_folder}"
    outputs:
      - ${vars.split_image_folder}

  - name: rotate
    help: "Rotate the split images to straighten text."
    script:
      - "python scripts/rotate.py ${vars.split_image_folder} ${vars.rotated_image_folder}"
    outputs:
      - ${vars.rotated_image_folder}
 
  # - name: remove_background
  #   help: "Remove black and purple background from images."
  #   script:
  #     - "python scripts/remove_background.py ${vars.rotated_image_folder} ${vars.background_removed_image_folder}"
  #   outputs:
  #     - ${vars.background_removed_image_folder}

  - name: adjust_image
    help: "Adjust contrast, exposure, and histogram of images to enhance text visibility."
    script:
      - "python scripts/adjust_image.py ${vars.rotated_image_folder} ${vars.adjusted_image_folder}"
    outputs:
      - ${vars.adjusted_image_folder}

  - name: chunk
    help: "Chunk the images into subfolders based on the file name of the image."
    script:
      - "python scripts/chunk.py ${vars.adjusted_image_folder} ${vars.chunked_image_folder} --num-chunks ${vars.num_chunks} --overlap-percentage ${vars.overlap_percentage}"
    outputs:
      - ${vars.chunked_image_folder}

  - name: transcribe
    help: "Transcribe the images"
    script:
      - "python scripts/transcribe.py ${vars.chunked_image_folder} ${vars.model} ${vars.transcribed_chunks_folder} '${vars.prompt}'"
    outputs:
      - assets/

  - name: dataset
    help: "Create a Hugging Face Dataset"
    script:
      - "python scripts/dataset.py ${vars.split_image_folder} ${vars.dataset_name}"
 
  - name: process
    help: "Process the transcriptions"
    script:
      - "python scripts/process.py data/ ${vars.nlp_model} data/data.jsonl"
    outputs:
      - assets/
  
  - name: publish
    help: "Publish the project"
    script:
      - "python scripts/publish.py ${vars.split_image_folder} ${vars.split_image_folder}/data.jsonl _site "
    outputs:
      - _site/

  - name: weasel
    help: "Force the weasel command to run again"
    script:
      - "python scripts/weasel.py --force"
    outputs:
      - weasel_output/
